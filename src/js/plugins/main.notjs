/*
 * ozoneUI Inclusive Design Engine
 * 
 * Copyright Rory Hering (2017) and other contributors
 * Released under the MIT license
 *
 * Date: 07/08/2017
 */

((factory) => {
  if (typeof define === 'function' && define.amd) {
    define(() => {
      return factory(window)
    })
  } else if (typeof module == 'object' && module.exports) {
    module.exports = factory(window)
  } else {
    window.o3 = factory()
  }
})(() => {

  const VERSION = '0.0.1'
  const PROD = 'prod'
  const DEV = 'dev'

  // Check for old browsers which don't support Element
  if (!self.Element) {
    return
  }

  if (!Element.prototype.matches) {
    Element.prototype.matches = Element.prototype.webkitMatchesSelector || Element.prototype.mozMatchesSelector || Element.prototype.msMatchesSelector || Element.prototype.oMatchesSelector || null
  }

  if (!Element.prototype.matches) {
    return
  }

  if (typeof window === 'undefined' || !window.document) {
    return function sortableError() {
      throw new Error('Ozone requires a window with a document')
    }
  }

  let qsa = function (selector, context) {
    return selector instanceof Node || selector instanceof Window ? [selector] : [].slice.call(typeof selector == "string" ? (context || document).querySelectorAll(selector) : selector || [])
  }

  let styles = {
    'start': 'background: blue; color: white; padding: 3px 10px; display: block;',
    'end': 'background: black; color: white; padding: 3px 10px; display: block;',
    'log': 'color: green; padding: 3px 10px; display: block;',
    'error': 'color: red; padding: 3px 10px; display: block;'
  }

  let o3 = window.o3 = {
    _running: false,

    _version: VERSION,

    _settings: {
      env: PROD
    },

    _system: {
      browser: {
        href: window.location.href,
        host: window.location.hostname,
        path: window.location.pathname,
        protocol: window.location.protocol,
        port: (window.location.protocol === 'http:') ? 80 : ((window.location.protocol === 'https:') ? 433 : window.location.port) || window.location.port,
        isOnline: navigator.onLine,
        lang: navigator.language,
        os: navigator.platform,
        width: window.innerWidth || document.documentElement.clientWidth || document.body.clientWidth,
        height: window.innerHeight || document.documentElement.clientHeight || document.body.clientHeight
      },
      screen: {
        bit: screen.colorDepth,
        width: screen.width,
        height: screen.height
      }
    },

    init: () => {
      // Feedback (if dev)
      if (o3._settings.env === DEV) {
        console.log('%cOzone has started', styles.start)
      }

      // Look for data-layer elements and build the features
    },

    tabs: (selector, context) => {
      console.log(qsa(selector, context))
    },

    settings: (opts) => {
      if (opts) {
        // Loop through each of Ozone's settings and change where necessary - reject unused values
        for (let i in o3._settings) {
          if (opts[i]) {
            o3._settings[i] = opts[i]
          }
        }

        // Feedback (if dev)
        if (o3._settings.env === DEV) {
          console.log('%cOZONE: New options', styles.log)
          console.log(o3._settings)
        }
      }
      return o3._settings
    },

    version: () => {
      return this._version
    },

    qsa: qsa
  }

  // Autorun
  if (document.readyState !== 'loading') {
    o3.init()
  } else {
    document.addEventListener("DOMContentLoaded", o3.init)
  }

  /*
  let Ozone = (function () {
    let ozone = {
      init: (selector, context) => {

        let dom
        if (!selector) {
          return ozone.O()
        } else if (typeof selector === 'string') {
          selector = selector.trim()
          if (typeof context === 'string') {
            context = context.trim()
            context = context
          }
          dom = this.query(selector, context)
        } else {
          selector = selector.trim()
        }

        let selectorType = 'querySelectorAll'

        if (selector.indexOf('#') === 0) {
          selectorType = 'getElementById'
          selector = selector.substr(1, selector.length)
        }

        return document[selectorType](selector)
      },
      query: (selector, context) => {
        
      }
    }

    let o3 = (selector) => {
      return ozone.init(selector)
    }

    // Define global functions
    o3.fn = {
      on: (event, selector) => {
        console.log('on', event, selector)
      }
    }

    ozone.O = (dom, selector) => {
      return new O(dom, selector)
    }

    ozone.isO = (object) => {
      return object instanceof ozone.O
    }

    // 
    ozone.O.prototype = O.prototype = o3.fn

    o3.ozone = ozone
    return o3
    

  })()

  window.Ozone = Ozone
  window.o3 === undefined && (window.o3 = Ozone)

  return Ozone
  */

})

/*
((window) => {

  let _version = '0.0.1'
  let _system = {
    browser: {
      href: window.location.href,
      host: window.location.hostname,
      path: window.location.pathname,
      protocol: window.location.protocol,
      port: (window.location.protocol === 'http:') ? 80 : ((window.location.protocol === 'https:') ? 433 : window.location.port) || window.location.port,
      isOnline: navigator.onLine,
      lang: navigator.language,
      os: navigator.platform,
      width: window.innerWidth || document.documentElement.clientWidth || document.body.clientWidth,
      height: window.innerHeight || document.documentElement.clientHeight || document.body.clientHeight
    },
    screen: {
      bit: screen.colorDepth,
      width: screen.width,
      height: screen.height
    }
  }
  let _settings = {
    mode: 'prod'
  }

  function ozone (selector) {
    console.log('selector', selector)
  }

  ozone.settings = function(opts) {
    if (opts) {
      _settings = opts
    }
    return _settings
  }

  ozone.system = function() {
    return _system
  }

  ozone.version = function() {
    return _version
  }

  // Expose the library to the browser
  let _ozone = window.ozone = ozone

  ozone.noConflict = () => {
    if (window.ozone === ozone) {
      window.ozone = _ozone
    }

    return ozone
  }

  if (typeof define === 'function' && define.amd) {
    define(() => {
      return ozone
    })
  } else if (typeof module !== 'undefined' && module.exports) {
    module.exports = ozone
  } else {
    window.ozone = ozone
  }

})(window)
*/

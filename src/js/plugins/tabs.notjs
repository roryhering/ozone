/**
 * --------------------------------------------------------------------------
 * Schwifty (0.0.1): tabs.js
 * based on: https://github.com/twbs/bootstrap/blob/v4-dev/js/src/tab.js
 * --------------------------------------------------------------------------
 */

const Tabs = (($) => {

  const NAME = 'tabs'
  const VERSION = '0.0.1'
  const DATA_KEY = 'schwifty.tabs'
  const EVENT_KEY = `.${DATA_KEY}`
  const DATA_API_KEY = '.data-api'
  const JQUERY_NO_CONFLICT = $.fn[NAME]

  const Event = {
    HIDE: `hide${EVENT_KEY}`,
    HIDDEN: `hidden${EVENT_KEY}`,
    SHOW: `show${EVENT_KEY}`,
    SHOWN: `shown${EVENT_KEY}`,
    CLICK_DATA_API: `click${EVENT_KEY}${DATA_API_KEY}`
  }

  /*
  const ClassName = {
    DROPDOWN_MENU: 'dropdown-menu',
    ACTIVE: 'active',
    DISABLED: 'disabled',
    FADE: 'fade',
    SHOW: 'show'
  }
  */

  const Selector = {
    DATA_WIDGET: '[data-widget="tabs"]'
  }

  class Tabs {

    constructor(element) {
      this._element = element
    }

    // Getters
    static get VERSION() {
      return VERSION
    }

    // Public
    create() {

      // For each selector
      $(this._element).each((i, tablist) => {

        // Convert element to jquery object
        tablist = $(tablist)
        if (tablist.attr('role') !== 'tablist') {

          const panels = []

          tablist[0].addEventListener("animationstart", this._insertListener, false)
          tablist[0].addEventListener("MSAnimationStart", this._insertListener, false)
          tablist[0].addEventListener("webkitAnimationStart", this._insertListener, false)

          // Assign the roles of the tablist
          tablist.attr({
            role: 'tablist'
          })

          // List items are presentation only
          tablist.find('>li').attr({
            role: 'presentation'
          })

          // Connect each link to their element
          tablist.find('>li a').each((i, el) => {
            el = $(el)
            el.attr({
              role: 'tab',
              tabindex: '-1',
              'aria-controls': el.attr('href').substring(1)
            })

            el.on('click', (event) => {

              event.preventDefault()
              let tab = $(event.currentTarget)

              // Reset the tabs
              tablist.find('>li [role="tab"]').attr({
                tabindex: '-1',
                'aria-selected': null
              })

              // Set the current one
              tab.attr({
                tabindex: '0',
                'aria-selected': true
              })

              // Reset the panels
              $.each(panels, (i, el) => {
                el.attr({
                  'aria-hidden': true
                })
              })

              // Show the correct panel
              $(el.attr('href')).attr({
                'aria-hidden': null
              })

            })

            // Keyboard interaction
            el.on('keydown', (event) => {
              let target = undefined
              let selected = $(event.currentTarget).closest('[role="tablist"]').find('[aria-selected="true"]')
              let prev = selected.closest('li').prev().find('[role="tab"]')
              let next = selected.closest('li').next().find('[role="tab"]')

              // Determine the direction
              switch (event.keyCode) {
              case 37:
              case 38:
                target = prev
                break
              case 39:
              case 40:
                target = next
                break
              default:
                target = undefined
                break
              }

              if (target && target.length) {
                event.preventDefault()
                target.focus().trigger('click')
              }
            })

            // Set the tab panel role
            let panel = $(el.attr('href'))
            panel.attr({
              role: 'tabpanel'
            })

            // Make the first child of the tabpanel focusable
            panel.find('>*:first-child').attr({
              tabindex: '0'
            })

            // Save for later
            panels.push(panel)
          })

          // console.log(panels)

          // Automatically select the first one
          let selectedIndex = 0
          let selectedTab = tablist.find('>li:eq(' + selectedIndex + ') a')
          selectedTab.attr({
            'aria-selected': 'true',
            tabindex: '0'
          })

          // Hide all panels (except for the selected panel)
          $.each(panels, (i, el) => {
            if (i !== selectedIndex) {
              el.attr({
                'aria-hidden': true
              })
            }
          })
        }
      })

    }

    static _insertListener(event) {
      if (event.animationName == 'nodeInserted') {
        console.warn('Another node has been inserted!', event, event.target)
      }
    }

    static _jQueryInterface(config) {
      return this.each(() => {
        let data = $(this).data(DATA_KEY)

        if (!data) {
          data = new Tabs(this)
          $(this).data(DATA_KEY, data)
        }

        if (typeof config === 'string') {
          if (data[config] === undefined) {
            throw new Error(`No method named "${config}"`)
          }
          data[config]()
        }
      })
    }

  }

  /**
   * ------------------------------------------------------------------------
   * Data Api implementation
   * ------------------------------------------------------------------------
   */

  $(document).on(Event.CLICK_DATA_API, Selector.DATA_WIDGET, (event) => {
    event.preventDefault()
    Tabs._jQueryInterface.call($(this), 'show')
  })

  /**
   * ------------------------------------------------------------------------
   * jQuery
   * ------------------------------------------------------------------------
   */

  $.fn[NAME] = Tabs._jQueryInterface
  $.fn[NAME].Constructor = Tabs
  $.fn[NAME].noConflict = () => {
    $.fn[NAME] = JQUERY_NO_CONFLICT
    return Tabs._jQueryInterface
  }

  return Tabs
})(jQuery)

export default Tabs
